// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":false,"inputs":[],"name":"refund","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"payout","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"fund","outputs":[],"type":"function"},{"inputs":[{"name":"name","type":"string"},{"name":"description","type":"string"},{"name":"owner","type":"address"},{"name":"target","type":"uint256"},{"name":"deadline","type":"uint256"}],"type":"constructor"}],
    binary: "606060405260405161037738038061037783398101604052805160805160a05160c05160e0519385019492909201929091906005544290101561004157610002565b6000805460ff191681556040805160a08101825287815260208181018890529181018690526060810185905260808101849052600180548951948290529193909283927fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6600282861615610100026000190190921691909104601f908101839004820193928c01908390106100f957805160ff19168380011785555b506101299291505b8082111561018857600081556001016100e5565b828001600101855582156100dd579182015b828111156100dd57825182600050559160200191906001019061010b565b50506020820151816001016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061018c57805160ff19168380011785555b506101bc9291506100e5565b5090565b8280016001018555821561017c579182015b8281111561017c57825182600050559160200191906001019061019e565b50506040820151600282018054600160a060020a03191690911790556060820151600382015560809190910151600491909101555050505050610174806102036000396000f3606060405260e060020a6000350463590e1ae3811461003157806363bd1d4a14610049578063b60d428814610060575b005b61002f6000805460019060ff16811461013857610002565b61002f60005460029060ff1681146100e157610002565b61002f6000805460ff1681146100a257610002565b6040812080543401905560045430600160a060020a0316311061009e57805460ff191660021781555b505b565b600554429010156100bd57805460ff191660011790556100a0565b600160a060020a033316815260066020526040812054348101101561007557610002565b600354600160a060020a0390811633909116146100fd57610002565b600080546003805460ff19909216178255600160a060020a039081169190301631606082818181858883f19350505050151561009e57610002565b600160a060020a0333168083526006602052604083208054908490559283606082818181858883f19350505050151561017057610002565b505056",
    unlinked_binary: "606060405260405161037738038061037783398101604052805160805160a05160c05160e0519385019492909201929091906005544290101561004157610002565b6000805460ff191681556040805160a08101825287815260208181018890529181018690526060810185905260808101849052600180548951948290529193909283927fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6600282861615610100026000190190921691909104601f908101839004820193928c01908390106100f957805160ff19168380011785555b506101299291505b8082111561018857600081556001016100e5565b828001600101855582156100dd579182015b828111156100dd57825182600050559160200191906001019061010b565b50506020820151816001016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061018c57805160ff19168380011785555b506101bc9291506100e5565b5090565b8280016001018555821561017c579182015b8281111561017c57825182600050559160200191906001019061019e565b50506040820151600282018054600160a060020a03191690911790556060820151600382015560809190910151600491909101555050505050610174806102036000396000f3606060405260e060020a6000350463590e1ae3811461003157806363bd1d4a14610049578063b60d428814610060575b005b61002f6000805460019060ff16811461013857610002565b61002f60005460029060ff1681146100e157610002565b61002f6000805460ff1681146100a257610002565b6040812080543401905560045430600160a060020a0316311061009e57805460ff191660021781555b505b565b600554429010156100bd57805460ff191660011790556100a0565b600160a060020a033316815260066020526040812054348101101561007557610002565b600354600160a060020a0390811633909116146100fd57610002565b600080546003805460ff19909216178255600160a060020a039081169190301631606082818181858883f19350505050151561009e57610002565b600160a060020a0333168083526006602052604083208054908490559283606082818181858883f19350505050151561017057610002565b505056",
    address: "",
    generated_with: "2.0.6",
    contract_name: "Project"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("Project error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("Project error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("Project error: lease call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("Project error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.Project = Contract;
  }

})();
